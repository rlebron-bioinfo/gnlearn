% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/algorithms.R
\name{boot.pc}
\alias{boot.pc}
\title{Peter & Clark Algorithm (PC) With Bootstrapping}
\usage{
boot.pc(
  df,
  whitelist = NULL,
  blacklist = NULL,
  alpha = 0.01,
  max.sx = Inf,
  R = 200,
  m = NULL,
  threshold = 0.5,
  to = c("igraph", "adjacency", "edges", "graph", "bnlearn"),
  cluster = 4,
  implementation = c("pcalg", "bnlearn"),
  pcalg.indep.test = pcalg::gaussCItest,
  pcalg.u2pd = c("relaxed", "rand", "retry"),
  pcalg.conservative = FALSE,
  pcalg.maj.rule = FALSE,
  pcalg.solve.confl = FALSE,
  bnlearn.test = ci.tests,
  bnlearn.B = NULL
)
}
\arguments{
\item{df}{Dataset.}

\item{whitelist}{A data frame with two columns, containing a set of arcs to be included in the graph (optional).}

\item{blacklist}{A data frame with two columns, containing a set of arcs not to be included in the graph (optional).}

\item{alpha}{Target nominal type I error rate. Default: 0.01}

\item{max.sx}{Maximum allowed size of the conditioning sets.}

\item{R}{Number of bootstrap replicates (optional). Default: 200}

\item{m}{Size of each bootstrap replicate (optional). Default: nrow(df)/2}

\item{threshold}{Minimum strength required for a coefficient to be included in the averaged adjacency matrix (optional). Default: 0.5}

\item{to}{Output format (('adjacency', 'edges', 'graph', 'igraph', or 'bnlearn')) (optional).}

\item{cluster}{A cluster object from package parallel or the number of cores to be used (optional). Default: 4}

\item{implementation}{Peter & Clark algorithm implementation: 'pcalg' or 'bnlearn'. Default: 'pcalg'}

\item{pcalg.indep.test}{Conditional independence test to be used (pcalg implementation). Default: pcalg::gaussCItest}

\item{pcalg.u2pd}{Method for dealing with conflicting information when trying to orient edges (pcalg implementation). Default: 'relaxed'}

\item{pcalg.conservative}{Whether or not the conservative PC is used (pcalg implementation). Default: FALSE}

\item{pcalg.maj.rule}{Whether or not the triples shall be checked for ambiguity using a majority rule idea, which is less strict than the conservative PC algorithm (pcalg implementation). Default: FALSE}

\item{pcalg.solve.confl}{If TRUE, the orientation of the v-structures and the orientation rules work with lists for candidate sets and allow bi-directed edges to resolve conflicting edge orientations (pcalg implementation). Default: FALSE}

\item{bnlearn.test}{Conditional independence test to be used (bnlearn implementation): 'cor', 'mc-cor', 'smc-cor', 'zf', 'mc-zf', 'smc-zf', 'mi-g', 'mc-mi-g', 'smc-mi-g', or 'mi-g-sh'. Default: 'cor'}

\item{bnlearn.B}{Number of permutations considered for each permutation test (bnlearn implementation).}
}
\description{
This function allows you to learn a directed graph from a dataset using the Peter & Clark algorithm (stable version).
}
\examples{
graph <- boot.pc(df, implementation='pcalg')
graph <- boot.pc(df, implementation='bnlearn')
}
\keyword{graph}
\keyword{learning}
